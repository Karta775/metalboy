use super::cpu::Cpu;

fn print_decode(opcode: u8, mnemonic: &str, len: u8, cyc: &str, grp: &str) {
    println!("{:02x} - {} | LEN: {} | CYC: {} | GRP: {}", opcode, mnemonic, len, cyc, grp);
}

fn unknown(cpu: &Cpu) {
    println!("{:02x} - {} | Unknown opcode", cpu.opcode, "???");
}

pub fn decode(cpu: &mut Cpu) {
    match cpu.opcode {
        0x00 => print_decode(cpu.opcode, "NOP", 1, "[4]", "control/misc"),
        0x01 => print_decode(cpu.opcode, "LD", 3, "[12]", "x16/lsm"),
        0x02 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x03 => print_decode(cpu.opcode, "INC", 1, "[8]", "x16/alu"),
        0x04 => print_decode(cpu.opcode, "INC", 1, "[4]", "x8/alu"),
        0x05 => print_decode(cpu.opcode, "DEC", 1, "[4]", "x8/alu"),
        0x06 => print_decode(cpu.opcode, "LD", 2, "[8]", "x8/lsm"),
        0x07 => print_decode(cpu.opcode, "RLCA", 1, "[4]", "x8/rsb"),
        0x08 => print_decode(cpu.opcode, "LD", 3, "[20]", "x16/lsm"),
        0x09 => print_decode(cpu.opcode, "ADD", 1, "[8]", "x16/alu"),
        0x0a => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x0b => print_decode(cpu.opcode, "DEC", 1, "[8]", "x16/alu"),
        0x0c => print_decode(cpu.opcode, "INC", 1, "[4]", "x8/alu"),
        0x0d => print_decode(cpu.opcode, "DEC", 1, "[4]", "x8/alu"),
        0x0e => print_decode(cpu.opcode, "LD", 2, "[8]", "x8/lsm"),
        0x0f => print_decode(cpu.opcode, "RRCA", 1, "[4]", "x8/rsb"),
        0x10 => print_decode(cpu.opcode, "STOP", 1, "[4]", "control/misc"),
        0x11 => print_decode(cpu.opcode, "LD", 3, "[12]", "x16/lsm"),
        0x12 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x13 => print_decode(cpu.opcode, "INC", 1, "[8]", "x16/alu"),
        0x14 => print_decode(cpu.opcode, "INC", 1, "[4]", "x8/alu"),
        0x15 => print_decode(cpu.opcode, "DEC", 1, "[4]", "x8/alu"),
        0x16 => print_decode(cpu.opcode, "LD", 2, "[8]", "x8/lsm"),
        0x17 => print_decode(cpu.opcode, "RLA", 1, "[4]", "x8/rsb"),
        0x18 => print_decode(cpu.opcode, "JR", 2, "[12]", "control/br"),
        0x19 => print_decode(cpu.opcode, "ADD", 1, "[8]", "x16/alu"),
        0x1a => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x1b => print_decode(cpu.opcode, "DEC", 1, "[8]", "x16/alu"),
        0x1c => print_decode(cpu.opcode, "INC", 1, "[4]", "x8/alu"),
        0x1d => print_decode(cpu.opcode, "DEC", 1, "[4]", "x8/alu"),
        0x1e => print_decode(cpu.opcode, "LD", 2, "[8]", "x8/lsm"),
        0x1f => print_decode(cpu.opcode, "RRA", 1, "[4]", "x8/rsb"),
        0x20 => print_decode(cpu.opcode, "JR", 2, "[12, 8]", "control/br"),
        0x21 => print_decode(cpu.opcode, "LD", 3, "[12]", "x16/lsm"),
        0x22 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x23 => print_decode(cpu.opcode, "INC", 1, "[8]", "x16/alu"),
        0x24 => print_decode(cpu.opcode, "INC", 1, "[4]", "x8/alu"),
        0x25 => print_decode(cpu.opcode, "DEC", 1, "[4]", "x8/alu"),
        0x26 => print_decode(cpu.opcode, "LD", 2, "[8]", "x8/lsm"),
        0x27 => print_decode(cpu.opcode, "DAA", 1, "[4]", "x8/alu"),
        0x28 => print_decode(cpu.opcode, "JR", 2, "[12, 8]", "control/br"),
        0x29 => print_decode(cpu.opcode, "ADD", 1, "[8]", "x16/alu"),
        0x2a => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x2b => print_decode(cpu.opcode, "DEC", 1, "[8]", "x16/alu"),
        0x2c => print_decode(cpu.opcode, "INC", 1, "[4]", "x8/alu"),
        0x2d => print_decode(cpu.opcode, "DEC", 1, "[4]", "x8/alu"),
        0x2e => print_decode(cpu.opcode, "LD", 2, "[8]", "x8/lsm"),
        0x2f => print_decode(cpu.opcode, "CPL", 1, "[4]", "x8/alu"),
        0x30 => print_decode(cpu.opcode, "JR", 2, "[12, 8]", "control/br"),
        0x31 => print_decode(cpu.opcode, "LD", 3, "[12]", "x16/lsm"),
        0x32 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x33 => print_decode(cpu.opcode, "INC", 1, "[8]", "x16/alu"),
        0x34 => print_decode(cpu.opcode, "INC", 1, "[12]", "x8/alu"),
        0x35 => print_decode(cpu.opcode, "DEC", 1, "[12]", "x8/alu"),
        0x36 => print_decode(cpu.opcode, "LD", 2, "[12]", "x8/lsm"),
        0x37 => print_decode(cpu.opcode, "SCF", 1, "[4]", "x8/alu"),
        0x38 => print_decode(cpu.opcode, "JR", 2, "[12, 8]", "control/br"),
        0x39 => print_decode(cpu.opcode, "ADD", 1, "[8]", "x16/alu"),
        0x3a => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x3b => print_decode(cpu.opcode, "DEC", 1, "[8]", "x16/alu"),
        0x3c => print_decode(cpu.opcode, "INC", 1, "[4]", "x8/alu"),
        0x3d => print_decode(cpu.opcode, "DEC", 1, "[4]", "x8/alu"),
        0x3e => print_decode(cpu.opcode, "LD", 2, "[8]", "x8/lsm"),
        0x3f => print_decode(cpu.opcode, "CCF", 1, "[4]", "x8/alu"),
        0x40 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x41 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x42 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x43 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x44 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x45 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x46 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x47 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x48 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x49 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x4a => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x4b => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x4c => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x4d => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x4e => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x4f => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x50 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x51 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x52 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x53 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x54 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x55 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x56 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x57 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x58 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x59 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x5a => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x5b => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x5c => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x5d => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x5e => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x5f => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x60 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x61 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x62 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x63 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x64 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x65 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x66 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x67 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x68 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x69 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x6a => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x6b => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x6c => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x6d => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x6e => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x6f => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x70 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x71 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x72 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x73 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x74 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x75 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x76 => print_decode(cpu.opcode, "HALT", 1, "[4]", "control/misc"),
        0x77 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x78 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x79 => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x7a => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x7b => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x7c => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x7d => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x7e => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0x7f => print_decode(cpu.opcode, "LD", 1, "[4]", "x8/lsm"),
        0x80 => print_decode(cpu.opcode, "ADD", 1, "[4]", "x8/alu"),
        0x81 => print_decode(cpu.opcode, "ADD", 1, "[4]", "x8/alu"),
        0x82 => print_decode(cpu.opcode, "ADD", 1, "[4]", "x8/alu"),
        0x83 => print_decode(cpu.opcode, "ADD", 1, "[4]", "x8/alu"),
        0x84 => print_decode(cpu.opcode, "ADD", 1, "[4]", "x8/alu"),
        0x85 => print_decode(cpu.opcode, "ADD", 1, "[4]", "x8/alu"),
        0x86 => print_decode(cpu.opcode, "ADD", 1, "[8]", "x8/alu"),
        0x87 => print_decode(cpu.opcode, "ADD", 1, "[4]", "x8/alu"),
        0x88 => print_decode(cpu.opcode, "ADC", 1, "[4]", "x8/alu"),
        0x89 => print_decode(cpu.opcode, "ADC", 1, "[4]", "x8/alu"),
        0x8a => print_decode(cpu.opcode, "ADC", 1, "[4]", "x8/alu"),
        0x8b => print_decode(cpu.opcode, "ADC", 1, "[4]", "x8/alu"),
        0x8c => print_decode(cpu.opcode, "ADC", 1, "[4]", "x8/alu"),
        0x8d => print_decode(cpu.opcode, "ADC", 1, "[4]", "x8/alu"),
        0x8e => print_decode(cpu.opcode, "ADC", 1, "[8]", "x8/alu"),
        0x8f => print_decode(cpu.opcode, "ADC", 1, "[4]", "x8/alu"),
        0x90 => print_decode(cpu.opcode, "SUB", 1, "[4]", "x8/alu"),
        0x91 => print_decode(cpu.opcode, "SUB", 1, "[4]", "x8/alu"),
        0x92 => print_decode(cpu.opcode, "SUB", 1, "[4]", "x8/alu"),
        0x93 => print_decode(cpu.opcode, "SUB", 1, "[4]", "x8/alu"),
        0x94 => print_decode(cpu.opcode, "SUB", 1, "[4]", "x8/alu"),
        0x95 => print_decode(cpu.opcode, "SUB", 1, "[4]", "x8/alu"),
        0x96 => print_decode(cpu.opcode, "SUB", 1, "[8]", "x8/alu"),
        0x97 => print_decode(cpu.opcode, "SUB", 1, "[4]", "x8/alu"),
        0x98 => print_decode(cpu.opcode, "SBC", 1, "[4]", "x8/alu"),
        0x99 => print_decode(cpu.opcode, "SBC", 1, "[4]", "x8/alu"),
        0x9a => print_decode(cpu.opcode, "SBC", 1, "[4]", "x8/alu"),
        0x9b => print_decode(cpu.opcode, "SBC", 1, "[4]", "x8/alu"),
        0x9c => print_decode(cpu.opcode, "SBC", 1, "[4]", "x8/alu"),
        0x9d => print_decode(cpu.opcode, "SBC", 1, "[4]", "x8/alu"),
        0x9e => print_decode(cpu.opcode, "SBC", 1, "[8]", "x8/alu"),
        0x9f => print_decode(cpu.opcode, "SBC", 1, "[4]", "x8/alu"),
        0xa0 => print_decode(cpu.opcode, "AND", 1, "[4]", "x8/alu"),
        0xa1 => print_decode(cpu.opcode, "AND", 1, "[4]", "x8/alu"),
        0xa2 => print_decode(cpu.opcode, "AND", 1, "[4]", "x8/alu"),
        0xa3 => print_decode(cpu.opcode, "AND", 1, "[4]", "x8/alu"),
        0xa4 => print_decode(cpu.opcode, "AND", 1, "[4]", "x8/alu"),
        0xa5 => print_decode(cpu.opcode, "AND", 1, "[4]", "x8/alu"),
        0xa6 => print_decode(cpu.opcode, "AND", 1, "[8]", "x8/alu"),
        0xa7 => print_decode(cpu.opcode, "AND", 1, "[4]", "x8/alu"),
        0xa8 => print_decode(cpu.opcode, "XOR", 1, "[4]", "x8/alu"),
        0xa9 => print_decode(cpu.opcode, "XOR", 1, "[4]", "x8/alu"),
        0xaa => print_decode(cpu.opcode, "XOR", 1, "[4]", "x8/alu"),
        0xab => print_decode(cpu.opcode, "XOR", 1, "[4]", "x8/alu"),
        0xac => print_decode(cpu.opcode, "XOR", 1, "[4]", "x8/alu"),
        0xad => print_decode(cpu.opcode, "XOR", 1, "[4]", "x8/alu"),
        0xae => print_decode(cpu.opcode, "XOR", 1, "[8]", "x8/alu"),
        0xaf => print_decode(cpu.opcode, "XOR", 1, "[4]", "x8/alu"),
        0xb0 => print_decode(cpu.opcode, "OR", 1, "[4]", "x8/alu"),
        0xb1 => print_decode(cpu.opcode, "OR", 1, "[4]", "x8/alu"),
        0xb2 => print_decode(cpu.opcode, "OR", 1, "[4]", "x8/alu"),
        0xb3 => print_decode(cpu.opcode, "OR", 1, "[4]", "x8/alu"),
        0xb4 => print_decode(cpu.opcode, "OR", 1, "[4]", "x8/alu"),
        0xb5 => print_decode(cpu.opcode, "OR", 1, "[4]", "x8/alu"),
        0xb6 => print_decode(cpu.opcode, "OR", 1, "[8]", "x8/alu"),
        0xb7 => print_decode(cpu.opcode, "OR", 1, "[4]", "x8/alu"),
        0xb8 => print_decode(cpu.opcode, "CP", 1, "[4]", "x8/alu"),
        0xb9 => print_decode(cpu.opcode, "CP", 1, "[4]", "x8/alu"),
        0xba => print_decode(cpu.opcode, "CP", 1, "[4]", "x8/alu"),
        0xbb => print_decode(cpu.opcode, "CP", 1, "[4]", "x8/alu"),
        0xbc => print_decode(cpu.opcode, "CP", 1, "[4]", "x8/alu"),
        0xbd => print_decode(cpu.opcode, "CP", 1, "[4]", "x8/alu"),
        0xbe => print_decode(cpu.opcode, "CP", 1, "[8]", "x8/alu"),
        0xbf => print_decode(cpu.opcode, "CP", 1, "[4]", "x8/alu"),
        0xc0 => print_decode(cpu.opcode, "RET", 1, "[20, 8]", "control/br"),
        0xc1 => print_decode(cpu.opcode, "POP", 1, "[12]", "x16/lsm"),
        0xc2 => print_decode(cpu.opcode, "JP", 3, "[16, 12]", "control/br"),
        0xc3 => print_decode(cpu.opcode, "JP", 3, "[16]", "control/br"),
        0xc4 => print_decode(cpu.opcode, "CALL", 3, "[24, 12]", "control/br"),
        0xc5 => print_decode(cpu.opcode, "PUSH", 1, "[16]", "x16/lsm"),
        0xc6 => print_decode(cpu.opcode, "ADD", 2, "[8]", "x8/alu"),
        0xc7 => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        0xc8 => print_decode(cpu.opcode, "RET", 1, "[20, 8]", "control/br"),
        0xc9 => print_decode(cpu.opcode, "RET", 1, "[16]", "control/br"),
        0xca => print_decode(cpu.opcode, "JP", 3, "[16, 12]", "control/br"),
        0xcb => print_decode(cpu.opcode, "PREFIX", 1, "[4]", "control/misc"),
        0xcc => print_decode(cpu.opcode, "CALL", 3, "[24, 12]", "control/br"),
        0xcd => print_decode(cpu.opcode, "CALL", 3, "[24]", "control/br"),
        0xce => print_decode(cpu.opcode, "ADC", 2, "[8]", "x8/alu"),
        0xcf => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        0xd0 => print_decode(cpu.opcode, "RET", 1, "[20, 8]", "control/br"),
        0xd1 => print_decode(cpu.opcode, "POP", 1, "[12]", "x16/lsm"),
        0xd2 => print_decode(cpu.opcode, "JP", 3, "[16, 12]", "control/br"),
        0xd4 => print_decode(cpu.opcode, "CALL", 3, "[24, 12]", "control/br"),
        0xd5 => print_decode(cpu.opcode, "PUSH", 1, "[16]", "x16/lsm"),
        0xd6 => print_decode(cpu.opcode, "SUB", 2, "[8]", "x8/alu"),
        0xd7 => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        0xd8 => print_decode(cpu.opcode, "RET", 1, "[20, 8]", "control/br"),
        0xd9 => print_decode(cpu.opcode, "RETI", 1, "[16]", "control/br"),
        0xda => print_decode(cpu.opcode, "JP", 3, "[16, 12]", "control/br"),
        0xdc => print_decode(cpu.opcode, "CALL", 3, "[24, 12]", "control/br"),
        0xde => print_decode(cpu.opcode, "SBC", 2, "[8]", "x8/alu"),
        0xdf => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        0xe0 => print_decode(cpu.opcode, "LDH", 2, "[12]", "x8/lsm"),
        0xe1 => print_decode(cpu.opcode, "POP", 1, "[12]", "x16/lsm"),
        0xe2 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0xe5 => print_decode(cpu.opcode, "PUSH", 1, "[16]", "x16/lsm"),
        0xe6 => print_decode(cpu.opcode, "AND", 2, "[8]", "x8/alu"),
        0xe7 => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        0xe8 => print_decode(cpu.opcode, "ADD", 2, "[16]", "x16/alu"),
        0xe9 => print_decode(cpu.opcode, "JP", 1, "[4]", "control/br"),
        0xea => print_decode(cpu.opcode, "LD", 3, "[16]", "x8/lsm"),
        0xee => print_decode(cpu.opcode, "XOR", 2, "[8]", "x8/alu"),
        0xef => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        0xf0 => print_decode(cpu.opcode, "LDH", 2, "[12]", "x8/lsm"),
        0xf1 => print_decode(cpu.opcode, "POP", 1, "[12]", "x16/lsm"),
        0xf2 => print_decode(cpu.opcode, "LD", 1, "[8]", "x8/lsm"),
        0xf3 => print_decode(cpu.opcode, "DI", 1, "[4]", "control/misc"),
        0xf5 => print_decode(cpu.opcode, "PUSH", 1, "[16]", "x16/lsm"),
        0xf6 => print_decode(cpu.opcode, "OR", 2, "[8]", "x8/alu"),
        0xf7 => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        0xf8 => print_decode(cpu.opcode, "LD", 2, "[12]", "x16/lsm"),
        0xf9 => print_decode(cpu.opcode, "LD", 1, "[8]", "x16/lsm"),
        0xfa => print_decode(cpu.opcode, "LD", 3, "[16]", "x8/lsm"),
        0xfb => print_decode(cpu.opcode, "EI", 1, "[4]", "control/misc"),
        0xfe => print_decode(cpu.opcode, "CP", 2, "[8]", "x8/alu"),
        0xff => print_decode(cpu.opcode, "RST", 1, "[16]", "control/br"),
        _ => unknown(cpu)
    }
}
